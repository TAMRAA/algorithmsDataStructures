#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 10

#define SUCCESS 1
#define FAILURE 0

typedef struct node{
    int data;
    struct node *link;
}node;

// Function prototypes
node *newE();
node *enqueue(struct node *Tail, int value);
node *dequeue (struct node *Tail, int *value, int *status);
node *visit(struct node *Tail);
void read(int *value);
void write (int status, int value);



// Main Function
int main(void){
    node *tail;
    int value, status;
    char choice[N];


    tail = NULL;

    do{
        fprintf(stdout,"choose operation: enqueue, dequeue, visit or end\n");
        scanf("%s",choice);

        if(strcmp(choice,"enqueue")==0){
            read(&value);
            tail = enqueue(tail,value);
            tail = visit(tail);

        }else if(strcmp(choice,"dequeue")==0){
            tail = dequeue(tail,&value,&status);
            write(status,value);
            tail = visit(tail);
        }else {
            if (strcmp(choice, "visit") == 0) {
                tail = visit(tail);
            }else{
                if(strcmp(choice, "end") != 0){
                    fprintf(stdout,"Wrong Input\n");
                }
            }
        }
    } while (strcmp(choice,"end")!=0);


    return (EXIT_SUCCESS);
}

node *newE(){
    node *ptr = (node *) malloc (sizeof (node));
    if(ptr == NULL){
        fprintf(stdout,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    return (ptr);
}

node *enqueue(struct node *Tail, int value){
    node *ptr = newE();
    ptr->data = value;
    if(Tail == NULL){
        Tail = ptr;
        Tail->link = Tail;
    }else{
        ptr->link = Tail->link;
        Tail->link = ptr;
        Tail = ptr;
    }

    return (Tail);

}

node *dequeue (struct node *Tail, int *value, int *status){
    node *Old;
    if(Tail != NULL){
        *status = SUCCESS;

        // Case of One node
        if(Tail == Tail->link){
            *value = Tail->data;
            free(Tail);
            Tail = NULL;
            // Case of Multiple nodes
        }else{
            Old = Tail->link;
            *value = Old->data;
            Tail->link = Old->link;
            free(Old);
        }

    }else{
        *status = FAILURE;
    }
    return (Tail);
}
node *visit(struct node *Tail){
    node *Tmp;

    fprintf (stdout, "Tail -> ");
    if (Tail == NULL) {
        fprintf (stdout, "NULL\n");
    } else {
        Tmp = Tail;
        do {
            fprintf (stdout, "%d -> ", Tmp->data);
            Tmp = Tmp->link;
        } while (Tmp != Tail);

        fprintf (stdout, "pTail \n");
    }

    return (Tail);
}

void read(int *value){
    fprintf(stdout,"insert value:\n");
    scanf("%d", value);
}

void write (int status, int value){
    if(status ==SUCCESS){
        fprintf(stdout,"element %d is out of the queue",value);
    }else{
        fprintf(stdout,"Queue is empty");
    }
}
