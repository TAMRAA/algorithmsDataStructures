#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 10

#define SUCCESS 1
#define FAILURE 0

typedef struct node{
    int data;
    struct node *link;
}node;

// Function prototypes
node *newE();
node *enqueue(struct node *pTail, int value);
node *dequeue (struct node *pTail, int *value, int *status);
node *traversal(struct node *pTail);
void read(int *value);
void write (int status, int value);



// Main Function
int main(void){
    node *tail;
    int value, status;
    char choice[N];


    tail = NULL;

    do{
        fprintf(stdout,"choose operation: ( Enqueue(e) Dequeue(d) Traversal(t) end(f) )\n");
        scanf("%s",choice);

        if(strcmp(choice,"e")==0){
            read(&value);
            tail = enqueue(tail,value);
            tail = traversal(tail);

        }else if(strcmp(choice,"d")==0){
            tail = dequeue(tail,&value,&status);
            write(status,value);
            tail = traversal(tail);
        }else {
            if (strcmp(choice, "t") == 0) {
                tail = traversal(tail);
            }else{
                if(strcmp(choice, "f") != 0){
                    fprintf(stdout,"Wrong Input\n");
                }
            }
        }
    } while (strcmp(choice,"f")!=0);


    return (EXIT_SUCCESS);
}

node *newE(){
    node *ptr = (node *) malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stdout,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    return (ptr);
}

node *enqueue(struct node *pTail, int value){
    node *ptr = newE();
    ptr->data = value;
    if(pTail == NULL){
        pTail = ptr;
        pTail->link = pTail;
    }else{
        ptr->link = pTail->link;
        pTail->link = ptr;
        pTail = ptr;
    }

    return (pTail);

}

node *dequeue (struct node *pTail, int *value, int *status){
    node *pOld;
    if(pTail != NULL){
        *status = SUCCESS;

        // Case of One node
        if(pTail == pTail->link){
            *value = pTail->data;
            free(pTail);
            pTail = NULL;
        // Case of Multiple node
        }else{
            pOld = pTail->link;
            *value = pOld->data;
            pTail->link = pOld->link;
            free(pOld);
        }

    }else{
        *status = FAILURE;
    }
    return (pTail);
}
node *traversal(struct node *pTail){
    node *pTmp;

    fprintf (stdout, "pTail -> ");
    if (pTail == NULL) {
        fprintf (stdout, "NULL\n");
    } else {
        pTmp = pTail;
        do {
            fprintf (stdout, "%d -> ", pTmp->data);
            pTmp = pTmp->link;
        } while (pTmp != pTail);

        fprintf (stdout, "pTail \n");
    }

    return (pTail);
}

void read(int *value){
    fprintf(stdout,"insert value:\n");
    scanf("%d", value);

    return;
}

void write (int status, int value){
    if(status ==SUCCESS){
        fprintf(stdout,"element %d is out of the queue",value);
    }else{
        fprintf(stdout,"Queue is empty");
    }
    return;
}
