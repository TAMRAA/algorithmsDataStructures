#include <stdio.h>
#include <stdlib.h>

#define size 8

// Function Prototypes
void quickSort(int *A, int N);
void r_quickSort(int *A, int l, int r);
int partition(int *A, int l, int r);
void swap(int *v, int n1, int n2);


// Main Function
int main() {
    // Initialize the array with values
    int arr[size] = {12, 4, 5, 6, 7, 3, 1, 15};
    int i;

    // Print the original array
    printf("Original array: ");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    // Call the quickSort function to sort the array
    quickSort(arr, size);

    // Print the sorted array
    printf("\nSorted array: ");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    return EXIT_SUCCESS;
}

// Wrapper Function
void quickSort(int *A, int N) {
    int l, r;

    // Set the initial values for the range to be sorted
    l = 0;
    r = N-1;

    // Call the recursive quickSort function
    r_quickSort(A, l, r);
}

// Recursive QuickSort Function
void r_quickSort(int *A, int l, int r) {
    int c;


    if (l >= r) {
        return;
    }

    // Divide the array into two partitions
    c = partition(A, l, r);

    // Recursively sort the left and right partitions
    r_quickSort(A, l, c - 1);
    r_quickSort(A, c + 1, r);
}

// Partition Function
int partition(int *A, int l, int r) {
    int i, j, pivot;

    // Initialize pointers and choose the pivot element
    i = l;
    j = r;

    // Pivot the last element
    pivot = A[r];

    // Perform the partitioning
    while (i < j) {
        // Move i to the right until we find an element A[i] >= pivot
        while (i < r && A[i] < pivot) {
            i++;
        }

        // Move j to the left until we find an element A[j] < pivot
        while (j > l && A[j] >= pivot) {
            j--;
        }

        // Swap A[i] and A[j] if i < j
        if (i < j) {
            swap(A, i, j);
        }
    }

    // Swap the pivot element with the correct position in the array
    swap(A, i, r);
    return i;
}

// Swap Function
void swap(int *v, int n1, int n2) {
    // Swap two elements in the array
    int temp;
    temp = v[n1];
    v[n1] = v[n2];
    v[n2] = temp;
}
