#include <stdio.h>
#include <stdlib.h>

// Function Prototypes
int comb(int *val, int *sol, int n, int k, int start, int count, int pos);
int comb_rep(int *val, int *sol, int n, int k, int start, int count, int pos);

// Main Function
int main(void) {
    // Predefined values for n and k
    int n = 4;
    int k = 2;

    // Allocate memory for val and sol arrays
    int *val = malloc(n * sizeof(int));
    int *sol = malloc(k * sizeof(int));

    // Predefined values for val array
    for (int i = 0; i < n; i++) {
        val[i] = i + 1;
    }

    // Get user choice for combination type
    int choice;
    printf("Choose the type of combination:\n");
    printf("1. Simple Combinations\n");
    printf("2. Combinations with Repetitions\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    // Perform the chosen combination type
    int count;
    if (choice == 1) {
        count = comb(val, sol, n, k, 0, 0, 0);
    } else if (choice == 2) {
        count = comb_rep(val, sol, n, k, 0, 0, 0);
    } else {
        printf("Invalid choice. Exiting...\n");
        return EXIT_FAILURE;
    }

    // Free allocated memory
    free(val);
    free(sol);

    printf("Total combinations: %d\n", count);

    return EXIT_SUCCESS;
}

// Function Definitions
int comb(int *val, int *sol, int n, int k, int start, int count, int pos) {
    int i;
    if (pos >= k) {
        for (i = 0; i < k; i++)
            printf("%d ", sol[i]);
        printf("\n");
        return count + 1;
    }
    for (i = start; i < n; i++) {
        sol[pos] = val[i];
        count = comb(val, sol, n, k, i + 1, count, pos + 1);
    }
    return count;
}

int comb_rep(int *val, int *sol, int n, int k, int start, int count, int pos) {
    int i;
    if (pos >= k) {
        for (i = 0; i < k; i++) {
            printf("%d ", sol[i]);
        }
        printf("\n");
        return count + 1;
    }
    for (i = start; i < n; i++) {
        sol[pos] = val[i];
        count = comb_rep(val, sol, n, k, i, count, pos + 1);
    }
    return count;
}
