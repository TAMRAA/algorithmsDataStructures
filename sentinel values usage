#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct node{
    int data;
    struct node *link;
}node;

// function prototypes
node *new_element();
node *search(node *head, int value);
node *sentinel_search(node *head, int value);

// main function
int main(void){
    node *head, *node1, *node2, *node3;
    node *ptr;

    // First node
    node1 = new_element();
    node1->data = 100;
    node1->link = NULL;
    head = node1;

    // Second node
    node2 = new_element();
    node2->data = 110;
    node2->link = NULL;
    head->link = node2;

    // Third node
    node3 = new_element();
    node3->data = 120;
    node3->link = NULL;
    head->link->link = node3;

    ptr = search(head, 110);
    ptr = sentinel_search(head,100);

    return (EXIT_SUCCESS);

}

node *new_element(){
    node *ptr = (node *) malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    return ptr;
}
node *search(node *head, int value){
    node *ptr = head;
    int found = 0, i = 0;
    while(ptr!=NULL && !found){
        if(ptr->data==value){
            found =1;
        }else{
            i++;
            ptr = ptr->link;
        }
    }
    if(found){
        fprintf(stdout,"found at index: %d", i+1);
    }
    return ptr;
}

node *sentinel_search(node *head, int value){
    node *ptr, *sentinel;
    int i = 0;
    sentinel->data = value;
    ptr = head;
    while (ptr->data!=value){
        ptr = ptr->link;
        i++;
    }
    if(ptr!=sentinel){
        fprintf(stdout,"found at index %d", (i+1));
    }else{
        fprintf(stdout,"not found");
    }
    return ptr;
}
