#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#define MAX_ID 6
#define MAX_NAME 21
// > <
// structure declaration
typedef struct {
    char id[MAX_ID];
    char surname[MAX_NAME];
    char name[MAX_NAME];
    int total_amount;
    int total_donation;
}donor_t;

// function prototypes
donor_t *donor_read(int *num_ptr);
void donor_analyze(donor_t *donor, int n);
void display_database(donor_t *donor, int n);
int search_id(donor_t *donor, char id[MAX_ID],int n);


// main function
int main(void){
    donor_t *donors;
    int n;
    donors = donor_read(&n);
    donor_analyze(donors,n);
    display_database(donors,n);
    return 0;
}

donor_t *donor_read(int *num_ptr){
    char id[MAX_ID], surname[MAX_NAME], name[MAX_NAME];
    int i, n;
    donor_t *donors;
    FILE *fp;
    fp = fopen("../file.txt","r");
    if(fp == NULL){
        fprintf(stdout,"error opening voluntary file");
        exit(EXIT_FAILURE);
    }
    n = 0;
    while(fscanf(fp, "%s %*s %s %s", id, surname, name)!=EOF){
        n++;
    }
    fclose(fp);
    donors = (donor_t *) malloc(n* sizeof(donor_t));
    if(donors == NULL){
        fprintf(stdout,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    fp = fopen("../file.txt","r");
    if(fp == NULL){
        fprintf(stdout,"error opening voluntary file");
        exit(EXIT_FAILURE);
    }
    // store the data in the structure
    for(i=0;i<n;i++){
        fscanf(fp,"%s %*s %s %s",id,surname,name);
        strcpy(donors[i].id,id);
        strcpy(donors[i].surname,surname);
        strcpy(donors[i].name,name);
        donors[i].total_donation = 0;
        donors[i].total_amount = 0;
    }
    fclose(fp);
    *num_ptr = n;
    return donors;
}

void donor_analyze(donor_t *donor, int n) {
    char id[MAX_NAME];
    int i, amount;
    FILE *fp;
    fp = fopen("../file1.txt", "r");
    if (fp == NULL) {
        fprintf(stdout, "error opening donation file");
        exit(EXIT_FAILURE);
    }
    while (fscanf(fp, "%s %d", id, &amount) != EOF) {
        // function to search id in structure
        i = search_id(donor,id,n);
        if(i>=0){
            donor[i].total_amount+=amount;
            donor[i].total_donation++;
        }
    }
    fclose(fp);
    return;
}

int search_id(donor_t *donor, char id[MAX_ID],int n){
    int i;
    for(i=0;i<n;i++){
        if(strcmp(donor[i].id,id) == 0){
            return i;
        }
    }
    return -1;
}

void display_database(donor_t *donor, int n){
    int i;
    for(i=0;i<n;i++){
        fprintf(stdout,"%s %s %s:\t",donor[i].id,donor[i].surname,donor[i].name);
        fprintf(stdout,"%d donations %d times\n",donor[i].total_amount,donor[i].total_donation);
    }
    return;
}
