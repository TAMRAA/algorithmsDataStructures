#include <stdlib.h>
#include <stdio.h>

typedef struct node{
    int data;
    struct node *next;
}node;

// Function Prototype
void traverseList (struct node *head);
void delBeginning(struct node *head);
void delPosition(struct node **head, int position);
void delLast(struct node *head);
void delList(struct node *head);
// Main Function
int main(void){

    struct node *head, *current;
    int position;

    head = (struct node *) malloc(sizeof (node));
    if(head == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    head->data = 100;
    head->next = NULL;

    current = (struct node *) malloc(sizeof (node));
    if(current== NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 110;
    current->next = NULL;

    head->next = current;


    current = (struct node *) malloc(sizeof (node));
    if(current== NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 120;
    current->next = NULL;
    head->next->next = current;

    current = (struct node *) malloc(sizeof (node));
    if(current== NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 130;
    current->next = NULL;
    head->next->next->next = current;

    current = (struct node *) malloc(sizeof (node));
    if(current== NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 140;
    current->next = NULL;
    head->next->next->next->next = current;

   // head = delBeginning(head);

    fprintf(stdout,"Insert position to delete:\n");
    scanf("%d", &position);

    delPosition(&head,position);
    traverseList(head);

    delList(head);
    traverseList(head);

    return (EXIT_SUCCESS);

}

void delBeginning(struct node *head){
    struct node *ptr = head;

    head = head->next;
    free(ptr);
    ptr = NULL;

}
void delPosition(struct node **head, int position){
    struct node *current = *head;
    struct node *previous = *head;

    if(*head == NULL){
        fprintf(stdout,"The list is empty");
        exit(EXIT_FAILURE);
    }
    else if(position == 1){
        *head = current->next;
        free(current);
        current = NULL;
    }else{
        while (position!=1){
         previous = current;
         current = current->next;
         position--;

        }
        previous->next = current->next;
        free(current);
        current = NULL;
    }

}

void delList(struct node *head){
    struct node *ptr;
    if(head == NULL){
        fprintf(stdout,"The list is empty");
        exit(EXIT_FAILURE);
    }else{
        ptr = head;
        while (ptr!=NULL){
            ptr = ptr->next;
            free(head);
            head = ptr;
        }
    }
}
void delLast(struct node *head){
    struct node *tmp, *tmp2;

    if(head == NULL){
        fprintf(stdout,"the list is empty\n");
    }
    // the Last Node is the head
    else if(head->next == NULL){
        free(head);
        head = NULL;
    }
    else{
        tmp = head;
        tmp2 = head;

        while (tmp2->next!=NULL){
            tmp = tmp2;
            tmp2 = tmp2->next;
        }
        tmp->next = NULL;
        free(tmp2);
        tmp2 = NULL;
    }
}

void reverseList(struct node *head){
    struct node *prev = NULL;
    struct node *next = NULL;

    while (head!=NULL){
        next = head->next;
        head->next = prev;
        prev = head;
        head = next;
    }
    head = prev;
}

void traverseList (struct node *head){
    node *ptr;
    int i = 1;

    ptr = head;
    while (ptr != NULL){
        fprintf(stdout,"node (%d): %d\n",i,ptr->data);
        ptr = ptr->next;
        i++;
    }

    ptr = NULL;
}
