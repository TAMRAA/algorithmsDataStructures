#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 20

#define SUCCESS 1
#define FAILURE 0

typedef struct node{
    int data;
    struct node *link;
}node;

// Function Prototypes
node *newElement();
node *push(struct node *top, int val);
node *pop(struct node *top, int *status);
void visit(struct node *top);

// Main Function
int main(void){
    node *top = NULL;
    int status, value;
    char userInput[MAX];

    do{
        fprintf(stdout,"Which operation: push pop visit end \n");
        scanf("%s", userInput);

        if(!strcmp(userInput,"push")){

            // Add value to stack
            fprintf(stdout,"insert value to push it into the STACK:\n");
            scanf("%d", &value);

            top = push(top,value);
            visit(top);
        }
        else if(!strcmp(userInput,"pop")){
            top = pop(top, &status);
            if(status == SUCCESS){
                visit(top);
            }else{
                fprintf(stdout,"Stack is empty\n");
            }
        }
        else if(!strcmp(userInput,"visit")){
            visit(top);
        }
        else if(!strcmp(userInput,"end")){
            fprintf(stdout,"App closed");
        }
        else{
            fprintf(stdout,"Wrong Input, Try Again\n");
        }

    } while (strcmp(userInput,"end") != 0);

}

node *newElement(){
    node *ptr;
    ptr = (struct node *) malloc (sizeof (node));
    if(ptr == NULL){
        fprintf(stderr,"Memory allocation failed");
        return NULL;
    }
    return ptr;
}

node *push(struct node *top, int val){
    node *ptr;

    ptr = newElement();
    ptr->data = val;
    ptr->link = NULL;

    ptr->link = top;
    top = ptr;

    return top;
}

void visit(struct node *top){
    node *ptr;


    ptr = top;
    fprintf(stdout,"Top -> ");

    while (ptr!= NULL){
        fprintf(stdout,"%d -> ",ptr->data);
        ptr = ptr->link;
    }
    fprintf(stdout,"NULL\n");
}

node *pop(struct node *top, int *status){
    node *ptr;

    if(top != NULL){
        *status = SUCCESS;
        ptr = top->link;
        free(top);
        return ptr;

    }else{
        *status = FAILURE;
    }
    return top;
}
