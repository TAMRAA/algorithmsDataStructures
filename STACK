#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 20

#define SUCCESS 1
#define FAILURE 0

typedef struct node{
    int data;
    struct node *next;
}node;

// Function Prototypes
void listOperations();
node *push(struct node *top, int value);
node *pop(struct node *top, int *status, int *data);
node *visit(struct node *top);
void read(int *data);

// Main function
int main(void){
    node *Top = NULL;
    char choice[MAX];
    int value, status;

    do{
        fprintf(stdout,"Choose an operation: ");
        listOperations();
        scanf("%s", choice);

        if(!strcmp(choice,"push")){
            // function push
            read(&value);
            Top = push(Top, value);
            Top = visit(Top);
        }
        else if(!strcmp(choice,"pop")){
            // function pop
            Top = pop(Top, &status, &value);
            if(status){
                fprintf(stdout,"%d has been popped successfully\n", value);
                Top = visit(Top);
            }else{
                fprintf(stdout,"List is empty\n");
            }
        }
        else {
            if (!strcmp(choice, "visit")) {
                // function traversal
                Top = visit(Top);

            } else {
                if (strcmp(choice, "end") != 0) {
                    fprintf(stdout, "Wrong input\n");
                }
            }
        }

    } while(strcmp(choice,"end")!=0);

    return (EXIT_SUCCESS);
}
void listOperations(){
    fprintf(stdout,"push, pop, visit or end\n");
}

node *push(struct node *top, int value){

    node *ptr = (struct node *) malloc (sizeof (node));
    if(ptr == NULL){
        fprintf(stdout,"Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    ptr->data = value;
    ptr->next = top;
    top = ptr;

    return (top);
}

node *pop(struct node *top, int *status, int *data){
    node *ptr;

    if(top != NULL){
        ptr = top;
        *status = SUCCESS;
        *data = ptr->data;

        top = top->next;
        free(ptr);
    } else{
        *status = FAILURE;
    }
    return (top);
}

node *visit(struct node *top){
    node *ptr;

    ptr = top;

    fprintf(stdout,"Top -> ");
    while (ptr != NULL){
        fprintf(stdout,"%d -> ", ptr->data);
        ptr = ptr->next;
    }
    fprintf(stdout,"NULL\n");

    ptr = NULL;

    return (top);
}

void read(int *data){
    fprintf(stdout,"Insert value to store:\n");
    scanf("%d", data);
}
