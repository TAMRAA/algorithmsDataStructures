#include <stdio.h>
#include <stdlib.h>
#define MAX 20

typedef struct {
    int arr[MAX];
    int size;
} MaxHeap;

// Function Prototypes
void swap (int *a , int *b);
void modifyKey(MaxHeap *heap, int index, int newValue);


// Main Function
int main(void){

    MaxHeap heap;
    heap.size = 5;

    heap.arr[0] = 3;
    heap.arr[1] = 8;
    heap.arr[2] = 5;
    heap.arr[3] = 12;
    heap.arr[4] = 10;

    // Modify the key at index 2 to 15
    modifyKey(&heap, 2, 15);

    // Output the modified heap
    printf("Modified Heap: ");
    for (int i = 0; i < heap.size; i++) {
        printf("%d ", heap.arr[i]);
    }
    printf("\n");


    return EXIT_SUCCESS;
}
// Function Declarations
void modifyKey(MaxHeap *heap, int index, int newValue) {

    // Check if index is out of bounds
    if (index < 0 || index >= heap->size) {
        printf("Index out of bounds.\n");
        return;
    }

    // Update the key at the specified index
    heap->arr[index] = newValue;

    // Calculate the index of the parent node
    int parentIndex = (index - 1) / 2;

    // Bubble up the updated key to maintain the heap property
    while (index > 0 && heap->arr[parentIndex] < heap->arr[index]) {
        // Swap the current key with its parent if necessary
        swap(&heap->arr[index], &heap->arr[parentIndex]);

        // Move up to the parent
        index = parentIndex;

        // Update parent index for the next iteration
        parentIndex = (index - 1) / 2;
    }
}

void swap (int *a , int *b){
    int tmp;
    tmp = *a;
    *a = *b;
    *b = tmp;
}
