#include <stdio.h>
#define N 10
// QUADRATIC SORTING ALGORITHMS
void insertion_sort(int * arr, int n);
void selection_sort(int *arr , int n);
void OptBubbleSort(int A[], int n);
void ShellSort(int A[], int n);
int main(){
    int array[N]= {6, 3, 5, 1, 7, 21, 8, 4, 12, 0};
    int i;
    // function call
    ShellSort(array,N);
    for(i=0;i<N;i++){
        printf("%d", array[i]);
        printf("\t");
    }
    return 0;
}

void insertion_sort(int * arr, int n){
    int i, j , x;
    for(i = 1; i<=n-1;i++){
        x = arr[i];
        j = i-1;
        while (j>=0 && arr[j] > x){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = x;
    }
}

void selection_sort(int *arr , int n){
    int i , j , min;
    int tmp;
    for(i=0;i<n-1;i++){
        min = i;
        for(j=i+1;j <= n-1;j++){
            if(arr[j]<arr[min]){
                min = j;
            }
        }
        if(min!=i){
            tmp = arr[i];
            arr[i] = arr[min];
            arr[min] = tmp;
        }
    }
    return;
}

void OptBubbleSort(int A[], int n) {
    int i, j,flag=1;
    int temp;
    for (i = 0; i < n-1 && flag==1; i++) {
        flag = 0;
        for (j = 0; j < n-1-i ; j++)
            if (A[j] > A[j+1]) {
                flag = 1;
                temp = A[j];
                A[j] = A[j+1];
                A[j+1] = temp;
            }
    }
    return;
}

void ShellSort(int A[], int n) {
    int i, j, x,  h=1;
    while (h < n/3){
        h = 3 * h + 1;
    }
    while(h >= 1) {
        for (i = h; i <= n-1; i++) {
            j = i;
            x = A[i];
            while(j >= h && x < A[j-h]) {
            A[j] = A[j-h];
            j -=h;
            }
            A[j] = x;
        }
        h = h/3;
    }
}
