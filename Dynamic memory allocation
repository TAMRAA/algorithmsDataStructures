#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 1000


// dynamic structure for student data
typedef struct {
    char *firstName, *lastName;
    int age;
    int avg;
}student_t;

//Function prototypes
student_t *create_structure(int n);
char **malloc2d (int r, int c);
char *free2d (char **m, int r);
int *array_create(int n);


int main(void){
    char **mat;
    int row, column;
    fprintf(stdout,"insert number of rows and column respectively:\n");
    scanf("%d %d", &row, &column);
    mat = malloc2d(row,column);

    return (EXIT_SUCCESS);
}

// dynamic structure

student_t *create_structure(int n){
    student_t *v = NULL;
    char first_name[N], last_name[N];
    int age;
    int average;

    v = (student_t *) malloc (n * sizeof (student_t));
    if(v == NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }

    fprintf(stdout,"name surname age average:\n");
    for (int i = 0; i < n; i++) {
        scanf("%s %s %d %d", first_name,last_name,&age,&average);
        v[i].firstName = strdup(first_name);
        v[i].lastName = strdup(last_name);
        v[i].age = age;
        v[i].avg = average;
    }
    fprintf(stdout,"name surname age average:\n");
    for(int i=0;i<n;i++){
        fprintf(stdout,"%s %s %d %d\n", v[i].firstName,v[i].lastName,v[i].age, v[i].avg);
    }

    return v;
}


// Dynamic array 1D

int *array_create(int n){
    int *ptr;
    ptr = (int *) malloc (n*sizeof (int));
    if(ptr==NULL){
        fprintf(stderr,"memory allocation failed");
        exit(1);
    }
    return ptr;
}


// Dynamic matrix 2D

char **malloc2d (int r, int c){
    int i;
    char str[N], **mat;
    mat = (char **) malloc(r * sizeof (char));
    if(mat == NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    for(i=0;i<r;i++){
        fprintf(stdout,"string(%d):\n", i+1);
        scanf("%s", str);
        mat[i] = (char *) malloc(c * sizeof (char));
        if(mat[i]==NULL){
            fprintf(stderr,"memory allocation failed");
            exit(EXIT_FAILURE);
        }
        mat[i] = strdup(str);
    }

    for(i=0;i<r;i++){
        fprintf(stdout,"%s\n", mat[i]);
    }
    return mat;
}


// free dynamic matrix
char *free2d (char **m, int r) {
    int i;
    for(i=0;i<r;i++){
        free(m[i]);
    }
    free(m);
    return NULL;
}

