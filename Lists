#include <stdio.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node *link;
}node;

// function prototypes
void add_at_end(struct node *head, int value);
void print_data(struct node *head);
void count_nodes(struct node *head);
void add_beg(struct node **head , int value);

// main function
int main(void){
    int n, n1;
    struct node *head;
    head = (struct node *) malloc (sizeof (node));
    if(head==NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    head->data = 100;
    head->link = NULL;

    struct node *current = (struct node *) malloc (sizeof (node));
    if(current==NULL) {
        fprintf(stderr, "memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 110;
    current->link = NULL;
    head->link = current;

    current = (struct node *) malloc(sizeof (node));
    if(current==NULL) {
        fprintf(stderr, "memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 120;
    current->link = NULL;
    head->link->link = current;
    fprintf(stdout,"insert a data to store in the beginning of the linked list:\n");
    scanf("%d", &n);
    fprintf(stdout,"insert a data to store at the end of the linked list:\n");
    scanf("%d", &n1);

    // function calls

    add_beg(&head,n);
    add_at_end(head,n1);
    print_data(head);
    count_nodes(head);
    return (EXIT_SUCCESS);
}


// **head -> to return a pointer to the head of the upgraded linked list
void add_beg(struct node **head , int value){
    struct node *ptr = (struct node *) malloc (sizeof(node));
    if(ptr ==NULL){
        fprintf(stdout,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    ptr->data = value;
    ptr->link = NULL;

    // link the first element to the second element
    ptr->link = *head;

    // shift the head to the beginning
    *head = ptr;

}



void add_at_end(struct node *head, int value){
    struct node *ptr, *tmp;
    ptr = head;
    tmp = (struct node *)malloc(sizeof (node));
    if(tmp == NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    tmp->data = value;
    tmp->link = NULL;

    while (ptr->link!=NULL){
        ptr = ptr->link;
    }
    ptr->link = tmp;
    fprintf(stdout,"a node has been added at the end of the list successfully!!\n");
    return;
}

void print_data(struct node *head){
    struct node *ptr;
    int i = 1;
    ptr = head;
    while (ptr!=NULL){
        fprintf(stdout,"node (%d): %d\n", i, ptr->data);
        i++;
        ptr = ptr->link;
    }
    return;
}

void count_nodes(struct node *head){
    struct node *ptr = head;
    int count = 0;
    if(head == NULL){
        fprintf(stdout,"the list is empty");
        exit(EXIT_FAILURE);
    }
    while(ptr!=NULL){
        count++;
        ptr = ptr->link;
    }
    fprintf(stdout,"number of nodes: %d", count);
    return ;
}
