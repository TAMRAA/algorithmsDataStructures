#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node{
    int data;
    struct node *link;
}node;

// function prototype 1) print 2) count nodes 3) add node at last

void count_node (struct node *head);
void print_data (struct node *head);
void add_at_end (struct node *head, int data);


int main(void){
    int n;
    struct node *head = malloc(sizeof (node));
    if(head ==NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    head->data = 100;
    head->link = NULL;

    struct node *current = malloc(sizeof(node));
    if(current ==NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 110;
    current->link = NULL;
    head->link = current;

    current = (struct node *) malloc (sizeof(node));
    if(current ==NULL){
        fprintf(stderr,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 120;
    current->link = NULL;
    head->link->link = current;

    fprintf(stdout,"insert data to store:\n");
    scanf("%d", &n);

    add_at_end(head,n);
    count_node(head);
    print_data(head);

    return (EXIT_SUCCESS);
}

void count_node (struct node *head){
    int count = 0;
    if(head ==NULL){
        fprintf(stdout,"0 nodes");
    }
    struct node *ptr = NULL;
    ptr = head;
    while (ptr != NULL){
        count++;
        ptr = ptr->link;
    }
    fprintf(stdout,"num of nodes: %d\n",count);
    return;
}

void print_data (struct node *head){
    int i = 1;
    if(head==NULL){
        fprintf(stdout,"list is empty");
    }
    struct node *ptr = NULL;
    ptr = head;
    while (ptr != NULL){
        fprintf(stdout,"data(%d): %d\n",i ,ptr->data);
        i++;
        ptr = ptr->link;
    }
    return;
}

void add_at_end (struct node *head, int data){
    struct node *ptr, *tmp;
    ptr = head;
    tmp = (struct node *) malloc(sizeof (node));
    tmp->data = data;
    tmp->link = NULL;
    while(ptr->link!=NULL){
        ptr = ptr->link;
    }
    ptr->link = tmp;
    return;
}
