#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// LIST IMPLEMENTATION
typedef struct node{
    int data;
    struct node *link;
}node;


// function prototypes

// ADDITION
void visitNodes (struct node *head);
void addBeginning(struct node **head, int value);
void addPosition(struct node *head, int value, int pos);
void addEnd(struct node *head, int value);


// DELETION
void delBeginning(struct node *head);
void delPosition(struct node **head, int position);
void delLast(struct node *head);
void delList(struct node *head);
void reverseList(struct node *head);



// main function
int main(void){
    struct node *head, *current;
    int value, position;

    head = (struct node *) malloc(sizeof (node));
    if(head == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    head->data = 100;
    head->link = NULL;

    current = (struct node *) malloc(sizeof (node));
    if(current == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 110;
    current->link = NULL;
    head->link = current;


    current = (struct node *) malloc(sizeof (node));
    if(current == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    current->data = 120;
    current->link = NULL;
    head->link->link = current;

    fprintf(stdout,"Insert value at the beginning of the list:\n");
    scanf("%d", &value);
    addBeginning(&head, value);

    fprintf(stdout,"Insert value and position to add it to the list:\n");
    scanf("%d %d", &value, &position);
    addPosition(head,value,position);

    fprintf(stdout,"Insert value at the end of the list:\n");
    scanf("%d", &value);

    addEnd(head,value);
    
    visitNodes(head);

    
    return (EXIT_SUCCESS);
}


// Function definitions

void visitNodes(struct node *head) {
    node *ptr;

    int counter;
    ptr = head;

    counter = 1;
    while (ptr != NULL) {
        fprintf(stdout, "node(%d): %d\n", counter, ptr->data);
        ptr = ptr->link;
        counter++;
    }

    fprintf(stdout, "Total nodes = %d", counter - 1);
}

void addBeginning(struct node **head, int value){
    struct node *ptr;

    ptr = malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stdout,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    ptr->data = value;
    ptr->link = *head;
    *head = ptr;
}

void addPosition(struct node *head, int value, int pos){
    struct node *ptr, *ptr2;

    ptr = (struct node *) malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    ptr->data = value;
    ptr->link = NULL;

    ptr2 = head;
    pos--;
    while (pos != 1){
        ptr2 = ptr2->link;
        pos--;
    }
    ptr->link = ptr2->link;
    ptr2->link = ptr;
}

void addEnd(struct node *head, int value){
    struct node *ptr;
    node * ptr2;

    ptr = (struct node *) malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stderr,"Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    ptr->data = value;
    ptr->link = NULL;

    ptr2 = head;
    while (ptr2->link != NULL){
        ptr2 = ptr2->link;
    }
    ptr2->link = ptr;
}


void delBeginning(struct node *head){
    struct node *ptr = head;

    head = head->link;
    free(ptr);
    ptr = NULL;

}
void delPosition(struct node **head, int position){
    struct node *current = *head;
    struct node *previous = *head;

    if(*head == NULL){
        fprintf(stdout,"The list is empty");
        exit(EXIT_FAILURE);
    }
    else if(position == 1){
        *head = current->link;
        free(current);
        current = NULL;
    }else{
        while (position!=1){
            previous = current;
            current = current->link;
            position--;

        }
        previous->link = current->link;
        free(current);
        current = NULL;
    }

}

void delList(struct node *head){
    struct node *ptr;
    if(head == NULL){
        fprintf(stdout,"The list is empty");
        exit(EXIT_FAILURE);
    }else{
        ptr = head;
        while (ptr!=NULL){
            ptr = ptr->link;
            free(head);
            head = ptr;
        }
    }
}
void delLast(struct node *head){
    struct node *tmp, *tmp2;

    if(head == NULL){
        fprintf(stdout,"the list is empty\n");
    }
        // the Last Node is the head
    else if(head->link == NULL){
        free(head);
        head = NULL;
    }
    else{
        tmp = head;
        tmp2 = head;

        while (tmp2->link!=NULL){
            tmp = tmp2;
            tmp2 = tmp2->link;
        }
        tmp->link = NULL;
        free(tmp2);
        tmp2 = NULL;
    }
}

void reverseList(struct node *head){
    struct node *prev = NULL;
    struct node *next = NULL;

    while (head!=NULL){
        next = head->link;
        head->link = prev;
        prev = head;
        head = next;
    }
    head = prev;
}
