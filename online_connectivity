// QUICK FIND

int main(void) {
    int i, t, p, q, id[N];
    for (i = 0; i < N; i++) {
        id[i] = i;
    }
    printf("insert pair p q:\n");
    while (scanf("%d %d", &p, &q) == 2) {
        if (id[p] == id[q]) {
            printf("%d %d already connected\n", p, q);
        } else {
            t = id[p];
            for (i = 0; i < N; i++) {
                if (id[i] == t) {
                    id[i] = id[q];
                }
            }
            printf("%d %d are now connected\n", p, q);
        }
        printf("insert pair p q:\n");
    }
}

// QUICK UNION 

#include <stdio.h>
#define N 100
int main(){
    int i, j , p , q, id[N];
    for(i=0;i<N;i++){
        id[i] = i;
    }
    printf("insert pair p q:\n");
    while(scanf("%d %d", &p, &q) == 2){
        for(i=p;i!=id[i];i=id[i]);
        for(j=q;j!=id[j];j=id[j]);
        if(i == j){
            printf("%d %d are connected\n", p, q);
        }else{
            id[i] = j;
            printf("%d %d are now connected\n", p, q);
        }
        printf("insert pair p q:\n");
    }
}




// QUICK WEIGHTED UNION 


int i, j, p, q, id[N], sz[N];
for(i=0; i<N; i++) { id[i] = i; sz[i] =1; }
printf("Input pair p q: ");
while (scanf("%d %d", &p, &q) ==2) {
for (i = p; i!= id[i]; i = id[i]);
for (j = q; j!= id[j]; j = id[j]);
if (i == j)
printf("pair %d %d already connected\n", p,q);else {
printf("pair %d %d not yet connected\n", p, q);if (sz[i] <= sz[j]) {
id[i] = j; sz[j] += sz[i]; }
else { id[j] = i; sz[i] += sz[j];}
}
printf("Input pair p q: ");
}
