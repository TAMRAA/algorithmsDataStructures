#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function prototypes
int fibonacci(int n, int *known);

// Main function
int main() {
    int *known, i, n;

    // Prompt the user to input the value of n
    fprintf(stdout, "Insert n:\n");
    scanf("%d", &n);

    // Allocate memory for the array 'known' to store Fibonacci values
    known = (int *)malloc((n + 1) * sizeof(int));

    // Check if memory allocation is successful
    if (known == NULL) {
        fprintf(stderr, "Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    // Initialize the 'known' array with -1
    for (i = 0; i <= n; i++) {
        known[i] = -1;
    }

    // Print the Fibonacci nth term using the recursive function
    fprintf(stdout, "Fibonacci %d-th term = %d\n", n, fibonacci(n, known));

    // Free the allocated memory
    free(known);

    // Return success status
    return EXIT_SUCCESS;
}

// Recursive function to calculate Fibonacci number for the given index 'n'
int fibonacci(int n, int *known) {
    // Check if the Fibonacci value for 'n' is not already calculated
    if (known[n] < 0) {
        // Base case: Fibonacci value for 0 and 1 is n
        if (n == 0 || n == 1) {
            known[n] = n;
        } else {
            // Recursive case: Calculate Fibonacci value for 'n' using previous two values
            known[n] = fibonacci(n - 1, known) + fibonacci(n - 2, known);
        }
    }

    // Return the calculated Fibonacci value for 'n'
    return known[n];
}
