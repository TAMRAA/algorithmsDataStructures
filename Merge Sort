#include <stdlib.h>
#include <stdio.h>

#define length 5

// Function prototypes
void merge(int *A, int *B, int l, int c, int r);
void r_mergeSort(int *A, int *B, int l, int r);
void mergeSort(int *A, int N);

int main(void) {
    int i;
    int array1[length] = {1, 3, 5, 7, 9};
    int array2[length] = {2, 4, 6, 8, 10};
    int mergedArray[length*2];


    // Merge both arrays into a single array
    for (i = 0; i < length; ++i) {
        mergedArray[i] = array1[i];
        mergedArray[i + length] = array2[i];
    }

    // Apply merge sort to the merged array
    mergeSort(mergedArray, length*2);

    fprintf(stdout, "Sorted array: ");

    for (i = 0; i < length*2; i++) {
        fprintf(stdout, "%d ", mergedArray[i]);
    }

    return EXIT_SUCCESS;
}

// Main merge sort function
void mergeSort(int *A, int N) {
    // Allocate temporary array for merging
    int *B = (int *) malloc (N * sizeof(int));

    // Initialize the range for sorting
    int l = 0, r = N - 1;

    // Start the recursive merge sort
    r_mergeSort(A, B, l, r);

    // Free dynamically allocated memory
    free(B);
}

// Recursive merge sort function
void r_mergeSort(int *A, int *B, int l, int r) {
    int c;

    // Base case: if the range is empty or has one element, it's already sorted
    if (l >= r)
        return;

    // Find the middle point of the array
    c = (l + r) / 2;

    // Recursively sort the first and second halves
    r_mergeSort(A, B, l, c);
    r_mergeSort(A, B, c + 1, r);

    // Merge the sorted halves
    merge(A, B, l, c, r);
}

// Merge function to combine two sorted halves
void merge(int *A, int *B, int l, int c, int r) {
    int i, j, k;

    // Compare and merge, use <= to make the sorting stable

    // Copy the first tail
    for (i = l, j = c + 1, k = l; i <= c && j <= r;) {
        if (A[i] <= A[j])
            B[k++] = A[i++];
        else
            B[k++] = A[j++];
    }

    // Copy the remaining elements if any in the first half
    while (i <= c)
        B[k++] = A[i++];

    // Copy the remaining elements if any in the second half
    while (j <= r)
        B[k++] = A[j++];

    // Copy the merged array back to the original array
    for (k = l; k <= r; k++)
        A[k] = B[k];
}
