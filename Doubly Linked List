#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define strLength 20

typedef struct node{
    struct node *prev;
    int data;
    struct node *next;

}node;

//Function prototypes
node *addNode(struct node *head, int value, int position);
node *deleteNode(struct node *head, int position);
node *reverse(struct node *head);
void visit(struct node *head);
node *newElement();


int main(void){
    node *head = NULL;
    int value, position;
    char userInput[strLength];

    // Create a new element

    head = newElement();
    head->data = 100;
    head->prev = NULL;
    head->next = NULL;

    do{
        fprintf(stdout,"Choose operations: add delete reverse visit end\n");
        scanf("%s", userInput);

        if(!strcmp(userInput,"add")){
            fprintf(stdout,"Insert value and position of the node to be inserted into the list:\n");
            scanf("%d %d", &value,&position);
            head = addNode(head,value,position);
            visit(head);
        }
        else if(!strcmp(userInput,"delete")){
            fprintf(stdout,"Insert position of the node to be deleted:\n");
            scanf("%d", &position);
            head = deleteNode(head,position);
            visit(head);
        }
        else if(!strcmp(userInput,"reverse")){
            head = reverse(head);
            visit(head);
        }
        else if(!strcmp(userInput,"visit")){
            visit(head);
        }
        else if(!strcmp(userInput,"end")){
            fprintf(stdout,"App closed :)");
        }
        else{
            fprintf(stderr,"Wrong Input Format!\n");
        }
    } while (strcmp(userInput,"end")!=0);


    return (EXIT_SUCCESS);
}

node *newElement(){
    node *ptr;
    ptr = (struct node *) malloc (sizeof (node));
    if(ptr == NULL){
        fprintf(stderr,"Memory allocation failed");
        return NULL;
    }
    return ptr;
}


// Add node function

node *addNode(struct node *head, int value, int position){
    node *tmp, *tmp2;
    node *ptr;

    // Create node
    ptr = newElement();
    ptr->data = value;
    ptr->next = NULL;
    ptr->prev = NULL;

    // Add to an empty list
    if (head == NULL) {
        head = ptr;
        return head;
    }

    // Add at the beginning of the list
    if(position == 1){
        ptr->next = head;
        head->prev = ptr;
        head = ptr;
        return head;
    }

    // Traverse to the right location
    tmp = head;
    position--;
    while (position != 1 && tmp->next != NULL){
        tmp = tmp->next;
        position--;
    }

    // Add to the end
    if(tmp->next == NULL){
        tmp->next = ptr;
        ptr->prev = tmp;

        // Add in a certain position
    } else {

        // Update links
        tmp2 = tmp->next;
        tmp->next = ptr;
        tmp2->prev = ptr;
        ptr->prev = tmp;
        ptr->next = tmp2;
    }

    return head;
}

node *deleteNode(struct node *head, int position){
    node *tmp, *tmp2;

    // Single Node
    if(head->next == NULL){
        free(head);
        head = NULL;
        return head;
    }

    // First Node

    if(position == 1){
        tmp = head->next;
        tmp->prev = NULL;

        fprintf(stdout,"First node is deleted :)\n");
        free(head);
        head = tmp;  // Update head to the new head
        return head;

    } else {
        tmp2 = head;
        // Traverse to the correct position
        while(position != 1){
            tmp2 = tmp2->next;
            position--;
        }

        // Delete certain location and the last node case
        tmp = tmp2->prev;
        tmp->next = tmp2->next;
        if (tmp2->next != NULL) {
            tmp2->next->prev = tmp;
        }

        // Free pointer
        free(tmp2);
    }

    return head;
}


void visit(struct node *head){
    node *ptr;
    int i = 1;

    if(head == NULL){
        fprintf(stderr,"List is empty\n");
        return;
    }
    ptr = head;
    while ( ptr!= NULL){
        fprintf(stdout,"node(%d): %d\n", i,ptr->data);
        ptr = ptr->next;
        i++;
    }
}

node *reverse(struct node *head){
    node *ptr1 = head;
    node *ptr2 = ptr1->next;

    ptr1->next = NULL;
    ptr1->prev = ptr2;

    while(ptr2 != NULL){
        ptr2->prev = ptr2->next;
        ptr2->next = ptr1;
        ptr1 = ptr2;
        ptr2 = ptr2->prev;
    }
    head = ptr1;
    return head;
}
