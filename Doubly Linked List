#include <stdio.h>
#include <stdlib.h>


typedef struct node{
    struct node *prev;
    int data;
    struct node *next;

}node;

//Function prototypes
struct node* add_to_empty(struct node *head, int value);
struct node* add_beginning(struct node *head, int value);
struct node* add_at_end (struct node *head, int value);
void print_data(struct node *head);

int main(void){
    int value1, value2, value3;
    struct node *head = (struct node *) malloc(sizeof (node));
    if(head == NULL){
        fprintf(stdout,"memory allocation failed");
        exit(EXIT_FAILURE);
    }

    fprintf(stdout,"insert data to initiate the doubly linked list:\n");
    scanf("%d", &value1);
    fprintf(stdout,"insert data to add at the beginning of the doubly linked list:\n");
    scanf("%d", &value2);
    fprintf(stdout,"insert data to add at the end of the doubly linked list:\n");
    scanf("%d", &value3);
    head = add_to_empty(head,value1);
    head = add_beginning(head, value2);
    head = add_at_end(head, value3);
    print_data(head);
    // function add beginning

    exit(EXIT_SUCCESS);
}
struct node* add_to_empty(struct node *head,int value) {
    struct node *ptr = head;
    if (head == NULL) {
        fprintf(stdout, "memory allocation failed");
        exit(EXIT_FAILURE);
    }
    ptr->prev = NULL;
    ptr->data = value;
    ptr->next = NULL;

    head = ptr;
    return head;
}

struct node* add_beginning(struct node *head, int value){
    struct node *ptr = (struct node *) malloc(sizeof (node));
    if(ptr == NULL){
        fprintf(stdout,"memory allocation failed");
        exit(EXIT_FAILURE);
    }
    if(head==NULL){
        fprintf(stdout,"the list is empty\n");
        exit(EXIT_FAILURE);
    }

    ptr->prev = NULL;
    ptr->data = value;
    ptr->next = NULL;

    ptr->next = head;
    head = ptr;

    return head;
}

struct node* add_at_end (struct node *head, int value){
    struct node *ptr, *tmp;
    ptr = (struct node *) malloc (sizeof(node));
    if(ptr == NULL){
        fprintf(stdout,"memory allocation failed");
        exit (EXIT_FAILURE);
    }
    // assigning the node
    ptr->prev = NULL;
    ptr->data = value;
    ptr->next = NULL;

    tmp = head;
    // traversal of the linked list
    while (tmp->next!=NULL){
        tmp = tmp->next;
    }
    tmp->next = ptr;
    ptr->prev = tmp;
    return head;
}

void print_data(struct node *head){
    struct node *ptr = head;
    int i = 1;
    while (ptr!=NULL){
        fprintf(stdout,"data(%d): %d\n",i,ptr->data);
        i++;
        ptr = ptr->next;
    }

}
