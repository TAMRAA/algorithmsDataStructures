#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// SUMMARY OF THE MODEL CODE

/*
 * Summary:
The code essentially generates and prints all possible combinations of choices for the given nodes, using a recursive approach.
The multiplication principle is applied by exploring all possible choices at each position.
The code emphasizes dynamic memory allocation for flexibility in handling nodes
with different numbers of choices.
 */



// Define a structure to represent a node in a combinatorial structure.

typedef struct node {
    // Number of selection in each set
    int numChoice;

    // the selection in each set
    int *choices;
} node;


// Function Prototypes
int mult_princ(node *val, int *sol, int n, int count, int pos);



// Main Function
int main() {
    // Assuming n is the number of elements

    int n = 3;
    int totalCount;

    node *val;
    int *sol;



    // Allocate main array

    val = (struct node *) malloc (n * sizeof(node));

    // Allocating all possible choices

    for (int i = 0; i < n; i++){
        val[i].choices = malloc(val[i].numChoice * sizeof(int));
    }


    // Solution array
    sol = (int *) malloc(n * sizeof(int));

    val[0].numChoice = 2;
    val[0].choices[0] = 1;
    val[0].choices[1] = 2;

    val[1].numChoice = 2;
    val[1].choices[0] = 3;
    val[1].choices[1] = 4;

    val[2].numChoice = 2;
    val[2].choices[0] = 5;
    val[2].choices[1] = 6;


    // Call the multiplication principle function
    totalCount = mult_princ(val, sol, n, 0, 0);

    printf("Total combinations: %d\n", totalCount);

    // Free allocated memory
    for (int i = 0; i < n; i++){
        free(val[i].choices);
    }

    free(val);
    free(sol);

    return EXIT_SUCCESS;
}


// Multiplication principle function

// Count = Count Number of solutions
// Pos = Count the recursion levels

int mult_princ(node *val, int *sol, int n, int count, int pos) {
    int i;

    if (pos >= n) {

        // Print the current combination
        for (i = 0; i < n; i++){
            printf("%d ", sol[i]);
        }
        printf("\n");

        // Increase the count, ( Which means: number of solutions )
        return count + 1;
    }

    // For all possible choices, ( pos = Recursion level ), on that level
    for (i = 0; i < val[pos].numChoice; i++) {

        // choose a choice for the current level
        sol[pos] = val[pos].choices[i];

        // the function sets the choice in the sol array and recursively calls itself for the next position (pos + 1).

        // Backtracking: The function tries all choices at the current position and explores all possible combinations.
        count = mult_princ(val, sol, n, count, pos + 1);
    }

    return count;
}
