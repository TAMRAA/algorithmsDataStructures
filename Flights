#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define maxFlights 150
#define fileName "../input.txt"

// Data Structure

typedef struct {
    char code[6];
    char depCity[4];
    char arrCity[4];
    float depTime;
    float arrTime;
}flight_t;

// Function Prototypes

int file_read(flight_t *flights, char *name);
void connection_search (flight_t *flights, int nf, flight_t request);
void info_write (flight_t flight);

int main(void){
    flight_t flights[maxFlights], request;
    int flightNum;

    fprintf(stdout,"Departure city:\n");
    scanf("%s", request.depCity);
    fprintf(stdout,"Arrival city:\n");
    scanf("%s", request.arrCity);
    fprintf(stdout,"leaving from:\n");
    scanf("%f", &request.depTime);

    flightNum = file_read(flights, fileName);
    connection_search(flights,flightNum,request);

    return (EXIT_SUCCESS);
}
int file_read(flight_t *flights, char *name){
    FILE *fp = fopen(name,"r");
    int i;
    if(fp==NULL){
        fprintf(stdout,"Error opening file");
        return (EXIT_FAILURE);
    }
    i = 0;
    while(fscanf(fp,"%s %s %s %f %f",flights[i].code,flights[i].depCity,
          flights[i].arrCity, &flights[i].depTime, &flights[i].arrTime) != EOF)
    {
        i++;
    }
    fclose(fp);
    return i;
}
void connection_search (flight_t *flights, int nf, flight_t request){
    int i, j, found;
    for (i=0; i<nf; i++) {
        if (strcmp(request.depCity, flights[i].depCity)==0 && request.depTime<=flights[i].depTime) {
            if (strcmp(request.arrCity, flights[i].arrCity)==0) {
                    printf("Direct flight:\n");
                    info_write(flights[i]);
            } else {
                found = 0;
                for (j=0; j<nf && !found; j++) {
                    if (strcmp(flights[j].depCity, flights[i].arrCity)==0
                        && strcmp(request.arrCity, flights[j].arrCity)==0
                        && flights[j].depTime>=flights[i].arrTime){
                        printf("Flight with one stop:\n");
                        info_write(flights[i]);
                        info_write(flights[j]);
                        found = 1;
                    }
                }
            }
        }
    }
}

void info_write (flight_t flight){
    printf("%s ", flight.code);
    printf("%s %s ", flight.depCity, flight.arrCity); printf("%2.2f %2.2f\n", flight.depTime, flight.arrTime);
    return;
}
